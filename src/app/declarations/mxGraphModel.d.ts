declare class mxGraphModel extends mxEventSource {
add(parent, child, index);
beginUpdate();
cellAdded(cell);
cellCloned(cell);
cellRemoved(cell);
cells: any;
clear();
cloneCell(cell);
cloneCellImpl(cell, mapping, includeChildren);
cloneCells(cells, includeChildren, mapping);
collapsedStateForCellChanged(cell, collapsed);
constructor(root);
contains(cell);
createId(cell);
createIds: boolean;
createRoot();
createUndoableEdit(significant);
currentEdit: any;
endUpdate();
endingUpdate: boolean;
eventSource: any;
execute(change);
filterCells(cells, filter);
filterDescendants(filter, parent);
geometryForCellChanged(cell, geometry);
getCell(id);
getChildAt(cell, index);
getChildCells(parent, vertices, edges);
getChildCount(cell);
getChildEdges(parent);
getChildVertices(parent);
getChildren(cell);
getConnections(cell);
getDescendants(parent);
getDirectedEdgeCount(cell, outgoing, ignoredEdge);
getEdgeAt(cell, index);
getEdgeCount(cell);
getEdges(cell, incoming, outgoing, includeLoops);
getEdgesBetween(source, target, directed);
getGeometry(cell);
getIncomingEdges(cell);
getNearestCommonAncestor(cell1, cell2);
getOpposites(edges, terminal, sources, targets);
getOrigin(cell);
getOutgoingEdges(cell);
getParent(cell);
getParents(cells);
getRoot(cell);
getStyle(cell);
getTerminal(edge, isSource);
getTopmostCells(cells);
getValue(cell);
ignoreRelativeEdgeParent: boolean;
isAncestor(parent, child);
isCollapsed(cell);
isConnectable(cell);
isCreateIds();
isEdge(cell);
isLayer(cell);
isRoot(cell);
isVertex(cell);
isVisible(cell);
maintainEdgeParent: true;
mergeChildren(from, to, cloneAllEdges);
mergeChildrenImpl(from, to, cloneAllEdges, mapping);
nextId: number;
parentForCellChanged(cell, parent, index);
postfix: string;
prefix: string;
remove(cell);
restoreClone(clone, cell, mapping);
root: any;
rootChanged(root);
setCollapsed(cell, collapsed);
setCreateIds(value);
setGeometry(cell, geometry);
setRoot(root);
setStyle(cell, style);
setTerminal(edge, terminal, isSource);
setTerminals(edge, source, target);
setValue(cell, value);
setVisible(cell, visible);
styleForCellChanged(cell, style);
terminalForCellChanged(edge, terminal, isSource);
updateEdgeParent(edge, root);
updateEdgeParents(cell, root);
updateLevel: number;
valueForCellChanged(cell, value);
visibleStateForCellChanged(cell, visible);
}