declare class mxGraph extends mxEventSource {
    EMPTY_ARRAY: any[];
    addAllEdges(cells);
    addCell(cell, parent, index, source, target);
    addCellOverlay(cell, overlay);
    addCells(cells, parent, index, source, target);
    addEdge(edge, parent, source, target, index);
    addImageBundle(bundle);
    addMouseListener(listener);
    addSelectionCell(cell);
    addSelectionCells(cells);
    alignCells(align, cells, param);
    allowAutoPanning: boolean;
    allowDanglingEdges: boolean;
    allowLoops: boolean;
    allowNegativeCoordinates: boolean;
    alreadyConnectedResource: string;
    alternateEdgeStyle: any;
    autoExtend: boolean;
    autoScroll: boolean;
    autoSizeCell(cell, recurse);
    autoSizeCells: boolean;
    autoSizeCellsOnAdd: boolean;
    backgroundImage: any;
    border: number;
    canExportCell(cell);
    canImportCell(cell);
    cellConnected(edge, terminal, source, constraint);
    cellEditor: any;
    cellLabelChanged(cell, value, autoSize);
    cellRenderer: any;
    cellResized(cell, bounds, ignoreRelative, recurse);
    cellSizeUpdated(cell, ignoreChildren);
    cellsAdded(cells, parent, index, source, target, absolute, constrain, extend);
    cellsBendable: boolean;
    cellsCloneable: boolean;
    cellsDeletable: boolean;
    cellsDisconnectable: boolean;
    cellsEditable: boolean;
    cellsFolded(cells, collapse, recurse, checkFoldable);
    cellsLocked: boolean;
    cellsMovable: boolean;
    cellsMoved(cells, dx, dy, disconnect, constrain, extend);
    cellsOrdered(cells, back);
    cellsRemoved(cells);
    cellsResizable: boolean;
    cellsResized(cells, bounds, recurse);
    cellsSelectable: boolean;
    cellsToggled(cells, show);
    center(horizontal, vertical, cx, cy);
    centerZoom: boolean;
    clearCellOverlays(cell);
    clearSelection();
    click(me);
    cloneCells(cells, allowInvalidEdges, mapping);
    cloneInvalidEdges: boolean;
    collapseExpandResource: string;
    collapseToPreferredSize: boolean;
    collapsedImage: any; // mxImage
    connectCell(edge, terminal, source, constraint);
    connectableEdges: boolean;
    constrainChild(cell, sizeFirst);
    constrainChildCells(cell);
    constrainChildren: boolean;
    constrainRelativeChildren: boolean;
    constructor(container, model, renderHint, stylesheet);
    consumeMouseEvent(evtName, me, sender);
    containsValidationErrorsResource: string;
    convertValueToString(cell);
    createCellEditor();
    createCellRenderer();
    createConnectionHandler();
    createEdge(parent, id, value, source, target, style);
    createEdgeHandler(state, edgeStyle);
    createEdgeSegmentHandler(state);
    createElbowEdgeHandler(state);
    createGraphHandler();
    createGraphView();
    createGroupCell(cells);
    createHandler(state);
    createHandlers();
    createPanningHandler();
    createPanningManager();
    createPopupMenuHandler();
    createSelectionCellsHandler();
    createSelectionModel();
    createStylesheet();
    createTooltipHandler();
    createVertex(parent, id, value, x, y, width, height, style, relative);
    createVertexHandler(state);
    dblClick(evt, cell);
    defaultLoopStyle(state, source, target, points, result);
    defaultOverlap: number;
    defaultParent: any;
    destroy();
    dialect: any;
    disconnectGraph(cells);
    disconnectOnMove: boolean;
    doResizeContainer(width, height);
    doubleTapEnabled: boolean;
    doubleTapTimeout: number;
    doubleTapTolerance: number;
    dropEnabled: boolean;
    edgeLabelsMovable: boolean;
    enabled: boolean;
    enterGroup(cell);
    enterStopsCellEditing: boolean;
    escape(evt);
    escapeEnabled: boolean;
    eventSource: undefined;
    exitGroup();
    expandedImage: any; // mxImage
    exportEnabled: boolean;
    extendParent(cell);
    extendParents: boolean;
    extendParentsOnAdd: boolean;
    extendParentsOnMove: boolean;
    findTreeRoots(parent, isolate, invert);
    fireGestureEvent(evt, cell);
    fireMouseEvent(evtName, me, sender);
    fit(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight);
    flipEdge(edge);
    foldCells(collapse, recurse, cells, checkFoldable, evt);
    foldingEnabled: boolean;
    getAllConnectionConstraints(terminal, source);
    getAllEdges(cells);
    getBackgroundImage();
    getBorder();
    getBorderSizes();
    getBoundingBox(cells);
    getBoundingBoxFromGeometry(cells, includeEdges);
    getBoundsForGroup(group, children, border);
    getCellAt(x, y, parent, vertices, edges, ignoreFn);
    getCellBounds(cell, includeEdges, includeDescendants);
    getCellContainmentArea(cell);
    getCellGeometry(cell);
    getCellOverlays(cell);
    getCellStyle(cell);
    getCellValidationError(cell);
    getCells(x, y, width, height, parent, result);
    getCellsBeyond(x0, y0, parent, rightHalfpane, bottomHalfpane);
    getCellsForGroup(cells);
    getChildCells(parent, vertices, edges);
    getChildEdges(parent);
    getChildOffsetForCell(cell);
    getChildVertices(parent);
    getCloneableCells(cells);
    getConnectionConstraint(edge, terminal, source);
    getConnectionPoint(vertex, constraint);
    getConnections(cell, parent);
    getCurrentRoot();
    getCursorForCell(cell);
    getCursorForMouseEvent(me);
    getDefaultParent();
    getDeletableCells(cells);
    getDropTarget(cells, evt, cell, clone);
    getEdgeValidationError(edge, source, target);
    getEdges(cell, parent, incoming, outgoing, includeLoops, recurse);
    getEdgesBetween(source, target, directed);
    getEditingValue(cell, evt);
    getEventState(state);
    getExportableCells(cells);
    getFoldableCells(cells, collapse);
    getFoldingImage(state);
    getGraphBounds();
    getGridSize();
    getImage(state);
    getImageFromBundles(key);
    getImportableCells(cells);
    getIncomingEdges(cell, parent);
    getIndicatorColor(state);
    getIndicatorGradientColor(state);
    getIndicatorImage(state);
    getIndicatorShape(state);
    getLabel(cell);
    getLinkForCell(cell);
    getMaximumGraphBounds();
    getModel();
    getMovableCells(cells);
    getOpposites(edges, terminal, sources, targets);
    getOutgoingEdges(cell, parent);
    getOutlineConstraint(point, terminalState, me);
    getOverlap(cell);
    getPointForEvent(evt, addOffset);
    getPreferredPageSize(bounds, width, height);
    getPreferredSizeForCell(cell);
    getRemovedCellsForChanges(changes);
    getSelectionCell();
    getSelectionCells();
    getSelectionCellsForChanges(changes);
    getSelectionCount();
    getSelectionModel();
    getStartSize(swimlane);
    getStateForTouchEvent(evt);
    getStylesheet();
    getSwimlane(cell);
    getSwimlaneAt(x, y, parent);
    getTerminalForPort(cell, source);
    getTolerance();
    getTooltip(state, node, x, y);
    getTooltipForCell(cell);
    getTranslateForRoot(cell);
    getVerticalAlign(state);
    getView();
    graphModelChanged(changes);
    gridEnabled: boolean;
    gridSize: number;
    groupCells(group, border, cells);
    hitsSwimlaneContent(swimlane, x, y);
    home();
    htmlLabels: boolean;
    ignoreScrollbars: boolean;
    imageBundles: any;
    importCells(cells, dx, dy, target, evt, mapping);
    importEnabled: boolean;
    init(container);
    initialTouchX: number;
    initialTouchY: number;
    insertEdge(parent, id, value, source, target, style);
    insertVertex(parent, id, value, x, y, width, height, style, relative);
    intersects(state, x, y);
    invokesStopCellEditing: boolean;
    isAllowDanglingEdges();
    isAllowLoops();
    isAllowNegativeCoordinates();
    isAllowOverlapParent(cell);
    isAutoSizeCell(cell);
    isAutoSizeCells();
    isCellBendable(cell);
    isCellCloneable(cell);
    isCellCollapsed(cell);
    isCellConnectable(cell);
    isCellDeletable(cell);
    isCellDisconnectable(cell, terminal, source);
    isCellEditable(cell);
    isCellFoldable(cell, collapse);
    isCellLocked(cell);
    isCellMovable(cell);
    isCellResizable(cell);
    isCellRotatable(cell);
    isCellSelectable(cell);
    isCellSelected(cell);
    isCellVisible(cell);
    isCellsBendable();
    isCellsCloneable();
    isCellsDeletable();
    isCellsDisconnectable();
    isCellsEditable();
    isCellsLocked();
    isCellsMovable();
    isCellsResizable();
    isCellsSelectable();
    isCloneEvent(evt);
    isCloneInvalidEdges();
    isConnectable(connectable);
    isConnectableEdges();
    isConstrainChild(cell);
    isConstrainChildren();
    isConstrainRelativeChildren();
    isConstrainedEvent(evt);
    isDisconnectOnMove();
    isDropEnabled();
    isEdgeLabelsMovable();
    isEdgeValid(edge, source, target);
    isEditing(cell);
    isEnabled();
    isEnterStopsCellEditing();
    isEscapeEnabled();
    isEventIgnored(evtName, me, sender);
    isEventSourceIgnored(evtName, me);
    isExtendParent(cell);
    isExtendParents();
    isExtendParentsOnAdd(cell);
    isExtendParentsOnMove();
    isGridEnabled();
    isGridEnabledEvent(evt);
    isHtmlLabel(cell);
    isHtmlLabels();
    isIgnoreTerminalEvent(evt);
    isInvokesStopCellEditing();
    isLabelClipped(cell);
    isLabelMovable(cell);
    isLoop(state);
    isMouseDown: boolean;
    isMultigraph();
    isOrthogonal(edge);
    isPort(cell);
    isPortsEnabled();
    isRecursiveResize(state);
    isResizeContainer();
    isSelectionEmpty();
    isSplitEnabled();
    isSplitTarget(target, cells, evt);
    isSwimlane(cell);
    isSwimlaneNesting();
    isSwimlaneSelectionEnabled();
    isSyntheticEventIgnored(evtName, me, sender);
    isTerminalPointMovable(cell, source);
    isToggleEvent(evt);
    isTransparentClickEvent(evt);
    isValidAncestor(cell, parent, recurse);
    isValidConnection(source, target);
    isValidDropTarget(cell, cells, evt);
    isValidRoot(cell);
    isValidSource(cell);
    isValidTarget(cell);
    isVertexLabelsMovable();
    isWrapping(cell);
    keepEdgesInBackground: boolean;
    keepEdgesInForeground: boolean;
    keepSelectionVisibleOnZoom: boolean;
    labelChanged(cell, value, evt);
    labelsVisible: boolean;
    lastTouchTime: number;
    lastTouchY: number;
    maxFitScale: number;
    maximumContainerSize: any;
    maximumGraphBounds: any;
    minFitScale: number;
    minPageBreakDist: number;
    minimumContainerSize: any;
    minimumGraphSize: any;
    model: any;
    mouseListeners: any;
    moveCells(cells, dx, dy, clone, target, evt, mapping);
    multigraph: boolean;
    multiplicities: any;
    nativeDblClickEnabled: boolean;
    orderCells(back, cells);
    pageBreakColor: string;
    pageBreakDashed: boolean;
    pageBreaksVisible: boolean;
    pageFormat: any; // mxRectangle
    pageScale: number;
    pageVisible: boolean;
    panDx: number;
    panDy: number;
    panGraph(dx, dy);
    portsEnabled: boolean;
    postProcessCellStyle(style);
    preferPageSize: boolean;
    processChange(change);
    recursiveResize: boolean;
    refresh(cell);
    removeCellOverlay(cell, overlay);
    removeCellOverlays(cell);
    removeCells(cells, includeEdges);
    removeCellsAfterUngroup(cells);
    removeCellsFromParent(cells);
    removeImageBundle(bundle);
    removeMouseListener(listener);
    removeSelectionCell(cell);
    removeSelectionCells(cells);
    removeStateForCell(cell);
    renderHint: any;
    resetEdge(edge);
    resetEdges(cells);
    resetEdgesOnConnect: boolean;
    resetEdgesOnMove: boolean;
    resetEdgesOnResize: boolean;
    resetViewOnRootChange: boolean;
    resizeCell(cell, bounds, recurse);
    resizeCells(cells, bounds, recurse);
    resizeChildCells(cell, newGeo);
    resizeContainer: boolean;
    scaleCell(cell, dx, dy, recurse);
    scrollCellToVisible(cell, center);
    scrollPointToVisible(x, y, extend, border);
    scrollRectToVisible(rect);
    selectAll(parent, descendants);
    selectCell(isNext, isParent, isChild);
    selectCellForEvent(cell, evt);
    selectCells(vertices, edges, parent);
    selectCellsForEvent(cells, evt);
    selectChildCell();
    selectEdges(parent);
    selectNextCell();
    selectParentCell();
    selectPreviousCell();
    selectRegion(rect, evt);
    selectVertices(parent);
    selectionModel: any;
    setAllowDanglingEdges(value);
    setAllowLoops(value);
    setAllowNegativeCoordinates(value);
    setAutoSizeCells(value);
    setBackgroundImage(image);
    setBorder(value);
    setCellStyle(style, cells);
    setCellStyleFlags(key, flag, value, cells);
    setCellStyles(key, value, cells);
    setCellWarning(cell, warning, img, isSelect);
    setCellsBendable(value);
    setCellsCloneable(value);
    setCellsDeletable(value);
    setCellsDisconnectable(value);
    setCellsEditable(value);
    setCellsLocked(value);
    setCellsMovable(value);
    setCellsResizable(value);
    setCellsSelectable(value);
    setCloneInvalidEdges(value);
    setConnectable(connectable);
    setConnectableEdges(value);
    setConnectionConstraint(edge, terminal, source, constraint);
    setConstrainChildren(value);
    setConstrainRelativeChildren(value);
    setDefaultParent(cell);
    setDisconnectOnMove(value);
    setDropEnabled(value);
    setEdgeLabelsMovable(value);
    setEnabled(value);
    setEnterStopsCellEditing(value);
    setEscapeEnabled(value);
    setExtendParents(value);
    setExtendParentsOnAdd(value);
    setExtendParentsOnMove(value);
    setGridEnabled(value);
    setGridSize(value);
    setHtmlLabels(value);
    setInvokesStopCellEditing(value);
    setMultigraph(value);
    setPanning(enabled);
    setPortsEnabled(value);
    setRecursiveResize(value);
    setResizeContainer(value);
    setSelectionCell(cell);
    setSelectionCells(cells);
    setSelectionModel(selectionModel);
    setSplitEnabled(value);
    setStylesheet(stylesheet);
    setSwimlaneNesting(value);
    setSwimlaneSelectionEnabled(value);
    setTolerance(value);
    setTooltips(enabled);
    setVertexLabelsMovable(value);
    sizeDidChange();
    snap(value);
    splitEdge(edge, cells, newEdge, dx, dy);
    splitEnabled: boolean;
    startEditing(evt);
    startEditingAtCell(cell, evt);
    stopEditing(cancel);
    stylesheet: any;
    swapBounds(cell, willCollapse);
    swimlaneIndicatorColorAttribute: string;
    swimlaneNesting: boolean;
    swimlaneSelectionEnabled: boolean;
    tapAndHold(me);
    tapAndHoldDelay: number;
    tapAndHoldEnabled: boolean;
    tapAndHoldInProgress: boolean;
    tapAndHoldValid: boolean;
    timerAutoScroll: boolean;
    toggleCellStyle(key, defaultValue, cell);
    toggleCellStyleFlags(key, flag, cells);
    toggleCellStyles(key, defaultValue, cells);
    toggleCells(show, cells, includeEdges);
    tolerance: number;
    translateCell(cell, dx, dy);
    translateToScrollPosition: boolean;
    traverse(vertex, directed, func, edge, visited, inverse);
    ungroupCells(cells);
    updateAlternateBounds(cell, geo, willCollapse);
    updateCellSize(cell, ignoreChildren);
    updateGroupBounds(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder);
    updateMouseEvent(me, evtName);
    updatePageBreaks(visible, width, height);
    useScrollbarsForPanning: boolean;
    validateCell(cell, context);
    validateEdge(edge, source, target);
    validateGraph(cell, context);
    validationAlert(message);
    vertexLabelsMovable: boolean;
    view: any;
    warningImage: any; // mxImage
    zoom(factor, center);
    zoomActual();
    zoomFactor: number;
    zoomIn();
    zoomOut();
    zoomTo(scale, center);
    zoomToRect(rect);
}